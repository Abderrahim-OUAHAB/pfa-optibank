import csv
import logging
from flask import Flask, json, request, jsonify
from pinecone_utils import init_pinecone, load_data_from_json
from groq_utils import get_llm
from langchain.chains import ConversationalRetrievalChain,LLMChain
from langchain.memory import ConversationBufferWindowMemory
from langchain.prompts import PromptTemplate
from flask_cors import CORS
import os
import requests
from cassandra_utils import get_account_by_email, get_last_transactions,get_card_by_account
app = Flask(__name__)
CORS(app, origins=["http://localhost:4200"])
# Configuration du logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Prompt
PROMPT_TEMPLATE = PROMPT_TEMPLATE = """Vous √™tes BANBot, un assistant sp√©cialis√© pour les clients bancaires. Votre mission est de fournir des r√©ponses claires et pr√©cises sur les services bancaires.

Contexte:
{context}

Question:
{question}

R√®gles strictes:
1. R√©pondez de mani√®re professionnelle et courte
2. Fournissez des informations exactes sur les produits/services bancaires
3. Pour les urgences (carte bloqu√©e, fraude...), indiquez imm√©diatement le num√©ro d√©di√©
4. Pour les localisations, proposez toujours l'agence la plus proche
5. Structurez bien vos r√©ponses avec des paragraphes clairs
6. Donnez les num√©ros de contact appropri√©s
7. Si la question concerne un probl√®me technique, orientez vers le service client
8. Pour les questions complexes, proposez un rendez-vous en agence
9. Si la question demande une info sur le compte du client, interrogez directement la base Cassandra via la fonction appropri√©e.


Objectif :
Fournir une assistance bancaire de qualit√© en toutes circonstances.
"""

prompt = PromptTemplate(
    template=PROMPT_TEMPLATE,
    input_variables=["context", "question"]
)
# PROMPT AGENT INTENTION
INTENT_PROMPT = PromptTemplate.from_template("""
Tu es un d√©tecteur d‚Äôintention. Ton travail est de classer la question suivante dans une de ces cat√©gories :
- GET_BALANCE
- GET_TRANSACTIONS
- GET_CARD
- GET_RIB
- AUTRE

Question : {question}

R√©ponse (une seule ligne) :
""")

llm = get_llm()
vectorstore = init_pinecone()
memory = ConversationBufferWindowMemory(
    k=1,
    memory_key="chat_history",
    return_messages=True,
    output_key='answer'
)

qa_chain = ConversationalRetrievalChain.from_llm(
    llm=llm,
    retriever=vectorstore.as_retriever(search_kwargs={"k": 1}),
    memory=memory,
    combine_docs_chain_kwargs={"prompt": prompt},
    return_source_documents=True,
    output_key='answer',
    verbose=True
)
intent_chain = LLMChain(llm=llm, prompt=INTENT_PROMPT)
# Fonction Geoapify
def find_nearest_bank(lat, lon):
    api_key = os.getenv("GEOAPIFY_API_KEY") or "1eaa80850f9f47e28a45b23f50424cd2"
    url = f"https://api.geoapify.com/v2/places?categories=service.financial&filter=circle:{lon},{lat},5000&bias=proximity:{lon},{lat}&limit=1&apiKey={api_key}"
    
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()

        if not data.get("features"):
            return "\n\nAucune agence bancaire trouv√©e dans un rayon de 5 km."

        feature = data["features"][0]
        props = feature.get("properties", {})
        
        bank_info = {
            "name": props.get("name", "Agence bancaire"),
            "address": props.get("formatted", "Adresse non disponible"),
            "phone": props.get("contact", {}).get("phone"),
            "opening_hours": props.get("opening_hours", {}).get("text"),
            "distance": props.get("distance", 0),  # en m√®tres
            "coordinates": feature.get("geometry", {}).get("coordinates", [])
        }

        # Construction du message
        result = "\n\nAGENCE BANCAIRE LA PLUS PROCHE :"
        result += f"\nüè¶ {bank_info['name']}"
        result += f"\nüìç {bank_info['address']}"
        
        if bank_info['phone']:
            result += f"\nüìû {bank_info['phone']}"
            
        if bank_info['opening_hours']:
            result += f"\nüïí Horaires: {bank_info['opening_hours']}"
            
        if bank_info['coordinates']:
            lon, lat = bank_info['coordinates']
            maps_link = f"https://www.google.com/maps/search/?api=1&query={lat},{lon}"
            result += f"\nüó∫Ô∏è Voir sur la carte: {maps_link}"
            
        result += f"\nüìè Distance: {bank_info['distance']} m√®tres"
        
        result += "\n\n‚ÑπÔ∏è En cas d'urgence (carte perdue/vol√©e): 0 892 705 705 (24h/24)"

        return result

    except requests.exceptions.RequestException as e:
        print(f"Erreur API Geoapify: {str(e)}")
        return "\n\nService de localisation temporairement indisponible"
    except Exception as e:
        print(f"Erreur inattendue: {str(e)}")
        return "\n\nErreur lors de la recherche d'agences bancaires"

@app.route('/init', methods=['POST'])
def initialize_data():
    try:
        load_data_from_json()
        return jsonify({"status": "success", "message": "Donn√©es charg√©es avec succ√®s"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500
    
    
@app.route('/ask', methods=['POST'])
def ask():
    data = request.get_json()
    account = None 
    txs=None
    if not data:
        return jsonify({"error": "Donn√©es JSON manquantes", "status": "error"}), 400

    user_input = data.get('message', '')
    email = data.get('email', None)

    if not user_input:
        return jsonify({"error": "Aucun message fourni", "status": "error"}), 400
    try:
        intent = intent_chain.run(question=user_input).strip().upper()
    except:
        intent = "AUTRE" 
    if intent == "GET_BALANCE" and email:
        account = get_account_by_email(email)
        if account:
            return jsonify({
                "answer": f"Votre solde actuel est de {account.balance}DH.",
                "status": "success"
            })
            
    if intent == ("GET_CARD" or "GET_RIB") and email:
        card = get_card_by_account(email)
        if card:
            return jsonify({
                "answer": f"Votre RIB est : {card.cardnumber} - cvv : {card.cvv}",
                "status": "success"
            })
            
    if intent == "GET_TRANSACTIONS" and email:
        txs = get_last_transactions(email)
        if txs:
            formatted = "\n".join([
                f"* {tx.transaction_amount}DH le {tx.transaction_date.date()} ({tx.transaction_type}): {tx.status}"
                for tx in txs
            ])
            return jsonify({
                "answer": f"Voici vos {len(txs)} derni√®res transactions :\n{formatted}",
                "status": "success"
            })


    try:
        # Appel √† la cha√Æne de conversation
        result = qa_chain.invoke({"question": user_input})
        
        # Conversion s√©curis√©e de la r√©ponse
        answer = ""
        if isinstance(result.get("answer"), dict):
            answer = json.dumps(result["answer"])  # Convertit le dict en string JSON
        else:
            answer = str(result.get("answer", "Aucune r√©ponse g√©n√©r√©e"))

        # Gestion de la localisation
        location = data.get('location', {})
        if location and isinstance(location, dict):
            try:
                lat = location.get("latitude")
                lon = location.get("longitude")
                if lat is not None and lon is not None:
                    lat = float(lat)
                    lon = float(lon)
                    if lat != 0 and lon != 0:
                        # Dans la fonction ask(), remplacez hospital_info par:
                        bank_info = find_nearest_bank(lat, lon)
                        if bank_info:
                            answer += str(bank_info)
            except (TypeError, ValueError) as e:
                print(f"Erreur de conversion de coordonn√©es: {str(e)}")

        # Pr√©paration des sources
        sources = []
        seen = set()
        for doc in result.get("source_documents", []):
            try:
                content = str(doc.page_content) if hasattr(doc, 'page_content') else "Contenu non disponible"
                metadata = doc.metadata if hasattr(doc, 'metadata') else {}
                key = hash(content + str(metadata))
                if key not in seen:
                    seen.add(key)
                    sources.append({
                        "page_content": content,
                        "metadata": metadata
                    })
            except Exception as e:
                print(f"Erreur traitement document: {str(e)}")
                continue

        return jsonify({
            "answer": answer,
            "sources": sources,
            "status": "success"
        })

    except Exception as e:
        print(f"Erreur lors du traitement: {str(e)}", flush=True)
        return jsonify({
            "error": "Erreur interne du serveur",
            "status": "error",
            "details": str(e)
        }), 500


    
@app.route('/reset', methods=['POST'])
def reset_conversation():
    try:
        # R√©initialisation compl√®te comme un red√©marrage
        global llm, vectorstore, memory, qa_chain
        
        # 1. R√©initialiser les composants LangChain
        llm = get_llm()  # Recr√©er une nouvelle instance LLM
        vectorstore = init_pinecone()  # Recharger le vectorstore
        
        # 2. Recr√©er la m√©moire avec un nouvel ID de session
        memory = ConversationBufferWindowMemory(
            memory_key="chat_history",
            return_messages=True,
            output_key='answer',
            k=1
        )
        
        # 3. Recr√©er la cha√Æne de conversation
        qa_chain = ConversationalRetrievalChain.from_llm(
            llm=llm,
            retriever=vectorstore.as_retriever(search_kwargs={"k": 3}),
            memory=memory,
            combine_docs_chain_kwargs={"prompt": prompt},
            return_source_documents=True,
            output_key='answer',
            verbose=False
        )
        
        # 4. Nettoyer les variables d'√©tat
        # (Ajoutez ici d'autres variables globales √† r√©initialiser)
        
        return jsonify({
            "status": "success",
            "message": "Conversation compl√®tement r√©initialis√©e",
            "new_session_id": str(id(memory))  # Identifiant unique pour debug
        })
        
    except Exception as e:
        print(f"Erreur lors de la r√©initialisation: {str(e)}", flush=True)
        return jsonify({
            "status": "error",
            "message": f"√âchec de la r√©initialisation: {str(e)}"
        }), 500





if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
