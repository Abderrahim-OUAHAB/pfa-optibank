version: '3.8'

services:
  # ==================== BACKEND (Spring Boot) ====================
  backend:
    build: ./transactions_fullstack/bt
    ports:
      - "8087:8087"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_BROKER=kafka:9092
      - REDIS_HOST=redis
      - CASSANDRA_HOST=cassandra
      - CASSANDRA_PORT=9042
    depends_on:
      - kafka
      - redis
      - cassandra
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend-network

  # ==================== FRONTEND (Angular) ====================
  frontend:
    build: ./transactions_fullstack/ft
    ports:
      - "4200:80"
    environment:
      - API_URL=http://backend:8087/api
    depends_on:
      - backend
    networks:
      - frontend-network
      - backend-network

  # ==================== CASSANDRA ====================
  cassandra:
    image: cassandra:4.1
    ports:
      - "9042:9042"  # Port CQL natif
      - "7000:7000"  # Port de communication entre nœuds
    volumes:
      - cassandra-data:/var/lib/cassandra
    environment:
      - CASSANDRA_CLUSTER_NAME=MyCluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
    healthcheck:
      test: ["CMD", "cqlsh", "-u cassandra", "-p cassandra", "-e describe keyspaces"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend-network

  # ==================== KAFKA ====================
  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka-network

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - kafka-network
      - backend-network

  # ==================== REDIS ====================
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend-network

  # ==================== CHATBOT ====================
  chatbot:
    build: ./chatbot
    ports:
      - "5000:5000"
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    networks:
      - backend-network

# ==================== VOLUMES ====================
volumes:
  cassandra-data:
    driver: local
  redis-data:
    driver: local
  kafka-data:
    driver: local

# ==================== RÉSEAUX ====================
networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
  kafka-network:
    driver: bridge